Notes

To make a Fixed Mass, it should extend Mass 
	it should not have any forces have any effect on it 

	
Questions:
	What is the myMass field used for in Mass.java? 
		I think that's the weight of the thing and affects how fast it moves 
		

for fixed mass: "This element does not move, regardless of what forces are applied to them."
	but do other mass elements move as if the fixed mass moved normally? 
	
	
Springs: "spring followed by the id of its two masses, a rest length, and a K springy-ness constant."
	springs take 4 parameters (2 masses, rest length, and k const)
	
Muscles: (these are going to be spring derivatives)
	this spring is indicated by the keyword muscle followed by the id of its two masses, a rest length, a K springy-ness constant, and an amplitude.
	take 5 parameters: 2 mases, rest length, k const, and amplitude 
	
	i believe amplitude is the max "stretch" of the spring (the rest length) 
	
	

Here's the design strategy for Forces 

you have an environment.xsp which will control all of the forces 

only mass objects can be affected by forces 
	each mass object should have it's own force calculation 
	
	for example, Mass.java should have a myGravity, myViscosity fields 
		then, in the update for Mass, you should apply all the forces 
			maybe a fot loop where you iterate through all the forces that will act on mass 
			
			

2/2 Work:
	isolate COM and get that working 
	
	
2/4 Work:
	goal to get a design for Wall repulsion
	
	"In the data file, this force is indicated by the keyword wall followed by a wall ID (1 is the top, 2 is right, etc.), 
	a magnitude, and an exponent value. An exponent value of 2.0 means inverse-square force (the force is inversely proportional 
	to the distance squared). A value of 0.0 is a constant force independent of position"
	
	*Note - the algorithm for calculating the force is the same as the center of mass force calculation 
	
	Each wall force will be fed in individually: i.e. --> wall 1 3.4 2.0 
	
	What you can do is create another layer of indirection --> WallRepulsion -> ArrayList<Forces> 
		Then you add the forces in there!? would that work..? 
	

	//methods added:
		getForces ==> getWallForces
		getVector ==> getWallVectors
		addForce ==> addWallForces
		addVector ==> addWallVectors 
		